import com.android.build.gradle.internal.dependency.ExtractAarTransform
import com.android.build.gradle.internal.dependency.AarTransform
import com.android.build.gradle.internal.publishing.AndroidArtifacts
import com.android.build.gradle.internal.publishing.AndroidArtifacts.ArtifactType
import com.google.common.collect.ImmutableList
import org.gradle.api.artifacts.transform.ArtifactTransform
import org.gradle.api.artifacts.type.ArtifactTypeDefinition
import java.util.regex.Pattern

import static org.gradle.api.internal.artifacts.ArtifactAttributes.ARTIFACT_FORMAT

import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

apply plugin: 'maven'

/**
 * Custom aar configuration needed to use aar files as dependencies in a pure java 
 * library project, lifted from the following repo:
 * https://github.com/nekocode/Gradle-Import-Aar
 */
configurations {
    aar {
        attributes {
            attribute(ARTIFACT_FORMAT, ArtifactTypeDefinition.JAR_TYPE)
        }

        // Add the aar inner jars to the compileClasspath
        sourceSets.main.compileClasspath += it

        // Put our custom dependencies onto IDEA's PROVIDED scope
        apply plugin: "idea"
        idea.module.scopes.PROVIDED.plus += [it]
    }
}

dependencies {
    // Transforamtions to extract the classes.jar in the aar package
    def explodedAarType = ArtifactType.EXPLODED_AAR.getType()
    registerTransform {
        from.attribute(ARTIFACT_FORMAT, AndroidArtifacts.TYPE_AAR)
        to.attribute(ARTIFACT_FORMAT, explodedAarType)
        artifactTransform(ExtractAarTransform)
    }

    registerTransform {
        from.attribute(ARTIFACT_FORMAT, explodedAarType)
        to.attribute(ARTIFACT_FORMAT, "classes.jar")
        artifactTransform(AarTransform) { params(ArtifactType.JAR) }
    }

    registerTransform {
        from.attribute(ARTIFACT_FORMAT, "classes.jar")
        to.attribute(ARTIFACT_FORMAT, ArtifactTypeDefinition.JAR_TYPE)
        artifactTransform(ClassesJarArtifactTransform)
    }

    compileOnly name: "android"

    compileOnly "org.p5android:processing-core:${modeVersion}"

    aar "com.google.ar:core:${arVersion}";
    aar "com.android.support:support-v4:${supportLibsVersion}"
}

/**
 * An ArtifactTransform for renaming the classes.jar
 */
class ClassesJarArtifactTransform extends ArtifactTransform {
    @Override
    List<File> transform(File file) {
        final String[] names = file.getPath().split(Pattern.quote(File.separator))
        final String aarName = names[names.length - 4].replace(".aar", "")
        final File renamedJar = new File(getOutputDirectory(), aarName + ".jar")
        renamedJar << file.bytes
        File libraryFolder = new File(System.getProperty("user.dir"), "mode/libraries/ar/library")
        libraryFolder.mkdirs();
        final File libraryJar = new File(libraryFolder, aarName + ".jar")
        Files.copy(renamedJar.toPath(), libraryJar.toPath(), REPLACE_EXISTING);
        return ImmutableList.of(renamedJar)
    }
}

task createPom {
    // The compile configuration should be replaced by implementation eventually:
    // https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration#new_configurations  
    pom {
       project {
           groupId "org.p5android"
           artifactId "processing-ar"
           version "${arLibVersion}"
           packaging "jar"
           licenses {
               license {
                   name "GNU Lesser General Public License, version 2.1"
                   url "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
                   distribution "repo"
               }
           }
           dependencies {
               dependency {
                   groupId "org.p5android"
                   artifactId "processing-core"
                   version "${modeVersion}"
                   scope "compile"
               }

               dependency {
                   groupId "com.google.ar"
                   artifactId "core"
                   version "${arVersion}"
                   scope "compile"
               }

               dependency {
                   groupId "com.android.support"
                   artifactId "support-v4"
                   version "${supportLibsVersion}"
                   scope "compile"
               }
           }
        }
    }.writeTo("dist/processing-ar-${arLibVersion}.pom")
}


sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// Does not work because of Processing-specific tags in source code, such as @webref
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
//     archives javadocJar
    archives sourcesJar
}

jar.doLast { task ->
    ant.checksum file: task.archivePath
}

clean.doFirst {
    delete "dist"
    delete "library/ar.jar"
}

build.doLast {
    // // Copying ar jar to library folder
    File arJar = file("library/ar.jar")
    arJar.mkdirs();
    Files.copy(file("$buildDir/libs/ar.jar").toPath(),
               arJar.toPath(), REPLACE_EXISTING);

    // // Copying the files for release on JCentral
    File distFolder = file("dist");
    distFolder.mkdirs();
    Files.copy(file("$buildDir/libs/ar.jar").toPath(),
               file("dist/processing-ar-${arLibVersion}.jar").toPath(), REPLACE_EXISTING);
    Files.copy(file("$buildDir/libs/ar-sources.jar").toPath(),
               file("dist/processing-ar-${arLibVersion}-sources.jar").toPath(), REPLACE_EXISTING);
    Files.copy(file("$buildDir/libs/ar.jar.MD5").toPath(),
               file("dist/processing-ar-${arLibVersion}.jar.md5").toPath(), REPLACE_EXISTING);
}